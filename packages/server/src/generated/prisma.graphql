# source: http://192.168.99.100:4466/tourname/dev
# timestamp: Tue May 15 2018 22:12:49 GMT+0200 (CEST)

type AggregateMatchSingle {
  count: Int!
}

type AggregateMatchTournament {
  count: Int!
}

type AggregateMemberRef {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateRoundFinal {
  count: Int!
}

type AggregateRoundLastSixteen {
  count: Int!
}

type AggregateRoundQuarterfinals {
  count: Int!
}

type AggregateRoundSemifinals {
  count: Int!
}

type AggregateTeamMatchSingle {
  count: Int!
}

type AggregateTeamMatchTournament {
  count: Int!
}

type AggregateTournament {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

enum Discipline {
  PoolTable
  TableTennis
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MatchSingle implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  organization(where: OrganizationWhereInput): Organization!
  discipline: Discipline!
  status: MatchSingleStatus!
  teamLeft(where: TeamMatchSingleWhereInput): TeamMatchSingle!
  teamRight(where: TeamMatchSingleWhereInput): TeamMatchSingle!
  winner(where: TeamMatchSingleWhereInput): TeamMatchSingle
}

"""
A connection to a list of items.
"""
type MatchSingleConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [MatchSingleEdge]!
  aggregate: AggregateMatchSingle!
}

input MatchSingleCreateInput {
  discipline: Discipline!
  status: MatchSingleStatus!
  organization: OrganizationCreateOneInput!
  teamLeft: TeamMatchSingleCreateOneInput!
  teamRight: TeamMatchSingleCreateOneInput!
  winner: TeamMatchSingleCreateOneInput
}

"""
An edge in a connection.
"""
type MatchSingleEdge {
  """
  The item at the end of the edge.
  """
  node: MatchSingle!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MatchSingleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  discipline_ASC
  discipline_DESC
  status_ASC
  status_DESC
}

type MatchSinglePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  discipline: Discipline!
  status: MatchSingleStatus!
}

enum MatchSingleStatus {
  New
  Finished
}

type MatchSingleSubscriptionPayload {
  mutation: MutationType!
  node: MatchSingle
  updatedFields: [String!]
  previousValues: MatchSinglePreviousValues
}

input MatchSingleSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MatchSingleSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [MatchSingleSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [MatchSingleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MatchSingleWhereInput
}

input MatchSingleUpdateInput {
  discipline: Discipline
  status: MatchSingleStatus
  organization: OrganizationUpdateOneInput
  teamLeft: TeamMatchSingleUpdateOneInput
  teamRight: TeamMatchSingleUpdateOneInput
  winner: TeamMatchSingleUpdateOneInput
}

input MatchSingleWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MatchSingleWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [MatchSingleWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [MatchSingleWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  discipline: Discipline

  """
  All values that are not equal to given value.
  """
  discipline_not: Discipline

  """
  All values that are contained in given list.
  """
  discipline_in: [Discipline!]

  """
  All values that are not contained in given list.
  """
  discipline_not_in: [Discipline!]
  status: MatchSingleStatus

  """
  All values that are not equal to given value.
  """
  status_not: MatchSingleStatus

  """
  All values that are contained in given list.
  """
  status_in: [MatchSingleStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [MatchSingleStatus!]
  organization: OrganizationWhereInput
  teamLeft: TeamMatchSingleWhereInput
  teamRight: TeamMatchSingleWhereInput
  winner: TeamMatchSingleWhereInput
}

input MatchSingleWhereUniqueInput {
  id: ID
}

type MatchTournament implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  organization(where: OrganizationWhereInput): Organization!
  tournament(where: TournamentWhereInput): Tournament!
  discipline: Discipline!
  teamLeft(where: TeamMatchTournamentWhereInput): TeamMatchTournament
  teamRight(where: TeamMatchTournamentWhereInput): TeamMatchTournament
  winner(where: TeamMatchTournamentWhereInput): TeamMatchTournament
  nextMatch(where: MatchTournamentWhereInput): MatchTournament
}

"""
A connection to a list of items.
"""
type MatchTournamentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [MatchTournamentEdge]!
  aggregate: AggregateMatchTournament!
}

input MatchTournamentCreateInput {
  discipline: Discipline!
  organization: OrganizationCreateOneInput!
  tournament: TournamentCreateOneInput!
  teamLeft: TeamMatchTournamentCreateOneInput
  teamRight: TeamMatchTournamentCreateOneInput
  winner: TeamMatchTournamentCreateOneInput
  nextMatch: MatchTournamentCreateOneInput
}

input MatchTournamentCreateOneInput {
  create: MatchTournamentCreateInput
  connect: MatchTournamentWhereUniqueInput
}

"""
An edge in a connection.
"""
type MatchTournamentEdge {
  """
  The item at the end of the edge.
  """
  node: MatchTournament!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MatchTournamentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  discipline_ASC
  discipline_DESC
}

type MatchTournamentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  discipline: Discipline!
}

type MatchTournamentSubscriptionPayload {
  mutation: MutationType!
  node: MatchTournament
  updatedFields: [String!]
  previousValues: MatchTournamentPreviousValues
}

input MatchTournamentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MatchTournamentSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [MatchTournamentSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [MatchTournamentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MatchTournamentWhereInput
}

input MatchTournamentUpdateDataInput {
  discipline: Discipline
  organization: OrganizationUpdateOneInput
  tournament: TournamentUpdateOneInput
  teamLeft: TeamMatchTournamentUpdateOneInput
  teamRight: TeamMatchTournamentUpdateOneInput
  winner: TeamMatchTournamentUpdateOneInput
  nextMatch: MatchTournamentUpdateOneInput
}

input MatchTournamentUpdateInput {
  discipline: Discipline
  organization: OrganizationUpdateOneInput
  tournament: TournamentUpdateOneInput
  teamLeft: TeamMatchTournamentUpdateOneInput
  teamRight: TeamMatchTournamentUpdateOneInput
  winner: TeamMatchTournamentUpdateOneInput
  nextMatch: MatchTournamentUpdateOneInput
}

input MatchTournamentUpdateOneInput {
  create: MatchTournamentCreateInput
  connect: MatchTournamentWhereUniqueInput
  delete: Boolean
  update: MatchTournamentUpdateDataInput
  upsert: MatchTournamentUpsertNestedInput
}

input MatchTournamentUpsertNestedInput {
  update: MatchTournamentUpdateDataInput!
  create: MatchTournamentCreateInput!
}

input MatchTournamentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MatchTournamentWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [MatchTournamentWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [MatchTournamentWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  discipline: Discipline

  """
  All values that are not equal to given value.
  """
  discipline_not: Discipline

  """
  All values that are contained in given list.
  """
  discipline_in: [Discipline!]

  """
  All values that are not contained in given list.
  """
  discipline_not_in: [Discipline!]
  organization: OrganizationWhereInput
  tournament: TournamentWhereInput
  teamLeft: TeamMatchTournamentWhereInput
  teamRight: TeamMatchTournamentWhereInput
  winner: TeamMatchTournamentWhereInput
  nextMatch: MatchTournamentWhereInput
}

input MatchTournamentWhereUniqueInput {
  id: ID
}

type MemberRef implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  organization(where: OrganizationWhereInput): Organization!
  role: Role!
}

"""
A connection to a list of items.
"""
type MemberRefConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [MemberRefEdge]!
  aggregate: AggregateMemberRef!
}

input MemberRefCreateInput {
  auth0Id: String!
  role: Role!
  organization: OrganizationCreateOneWithoutMemberRefsInput!
}

input MemberRefCreateManyInput {
  create: [MemberRefCreateInput!]
  connect: [MemberRefWhereUniqueInput!]
}

input MemberRefCreateManyWithoutOrganizationInput {
  create: [MemberRefCreateWithoutOrganizationInput!]
  connect: [MemberRefWhereUniqueInput!]
}

input MemberRefCreateWithoutOrganizationInput {
  auth0Id: String!
  role: Role!
}

"""
An edge in a connection.
"""
type MemberRefEdge {
  """
  The item at the end of the edge.
  """
  node: MemberRef!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MemberRefOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  auth0Id_ASC
  auth0Id_DESC
  role_ASC
  role_DESC
}

type MemberRefPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  role: Role!
}

type MemberRefSubscriptionPayload {
  mutation: MutationType!
  node: MemberRef
  updatedFields: [String!]
  previousValues: MemberRefPreviousValues
}

input MemberRefSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MemberRefSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [MemberRefSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [MemberRefSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MemberRefWhereInput
}

input MemberRefUpdateDataInput {
  auth0Id: String
  role: Role
  organization: OrganizationUpdateOneWithoutMemberRefsInput
}

input MemberRefUpdateInput {
  auth0Id: String
  role: Role
  organization: OrganizationUpdateOneWithoutMemberRefsInput
}

input MemberRefUpdateManyInput {
  create: [MemberRefCreateInput!]
  connect: [MemberRefWhereUniqueInput!]
  disconnect: [MemberRefWhereUniqueInput!]
  delete: [MemberRefWhereUniqueInput!]
  update: [MemberRefUpdateWithWhereUniqueNestedInput!]
  upsert: [MemberRefUpsertWithWhereUniqueNestedInput!]
}

input MemberRefUpdateManyWithoutOrganizationInput {
  create: [MemberRefCreateWithoutOrganizationInput!]
  connect: [MemberRefWhereUniqueInput!]
  disconnect: [MemberRefWhereUniqueInput!]
  delete: [MemberRefWhereUniqueInput!]
  update: [MemberRefUpdateWithWhereUniqueWithoutOrganizationInput!]
  upsert: [MemberRefUpsertWithWhereUniqueWithoutOrganizationInput!]
}

input MemberRefUpdateWithoutOrganizationDataInput {
  auth0Id: String
  role: Role
}

input MemberRefUpdateWithWhereUniqueNestedInput {
  where: MemberRefWhereUniqueInput!
  data: MemberRefUpdateDataInput!
}

input MemberRefUpdateWithWhereUniqueWithoutOrganizationInput {
  where: MemberRefWhereUniqueInput!
  data: MemberRefUpdateWithoutOrganizationDataInput!
}

input MemberRefUpsertWithWhereUniqueNestedInput {
  where: MemberRefWhereUniqueInput!
  update: MemberRefUpdateDataInput!
  create: MemberRefCreateInput!
}

input MemberRefUpsertWithWhereUniqueWithoutOrganizationInput {
  where: MemberRefWhereUniqueInput!
  update: MemberRefUpdateWithoutOrganizationDataInput!
  create: MemberRefCreateWithoutOrganizationInput!
}

input MemberRefWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MemberRefWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [MemberRefWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [MemberRefWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  auth0Id: String

  """
  All values that are not equal to given value.
  """
  auth0Id_not: String

  """
  All values that are contained in given list.
  """
  auth0Id_in: [String!]

  """
  All values that are not contained in given list.
  """
  auth0Id_not_in: [String!]

  """
  All values less than the given value.
  """
  auth0Id_lt: String

  """
  All values less than or equal the given value.
  """
  auth0Id_lte: String

  """
  All values greater than the given value.
  """
  auth0Id_gt: String

  """
  All values greater than or equal the given value.
  """
  auth0Id_gte: String

  """
  All values containing the given string.
  """
  auth0Id_contains: String

  """
  All values not containing the given string.
  """
  auth0Id_not_contains: String

  """
  All values starting with the given string.
  """
  auth0Id_starts_with: String

  """
  All values not starting with the given string.
  """
  auth0Id_not_starts_with: String

  """
  All values ending with the given string.
  """
  auth0Id_ends_with: String

  """
  All values not ending with the given string.
  """
  auth0Id_not_ends_with: String
  role: Role

  """
  All values that are not equal to given value.
  """
  role_not: Role

  """
  All values that are contained in given list.
  """
  role_in: [Role!]

  """
  All values that are not contained in given list.
  """
  role_not_in: [Role!]
  organization: OrganizationWhereInput
}

input MemberRefWhereUniqueInput {
  id: ID
}

type Mutation {
  createMemberRef(data: MemberRefCreateInput!): MemberRef!
  createOrganization(data: OrganizationCreateInput!): Organization!
  createTournament(data: TournamentCreateInput!): Tournament!
  createTeamMatchTournament(
    data: TeamMatchTournamentCreateInput!
  ): TeamMatchTournament!
  createTeamMatchSingle(data: TeamMatchSingleCreateInput!): TeamMatchSingle!
  createRoundLastSixteen(data: RoundLastSixteenCreateInput!): RoundLastSixteen!
  createRoundQuarterfinals(
    data: RoundQuarterfinalsCreateInput!
  ): RoundQuarterfinals!
  createRoundSemifinals(data: RoundSemifinalsCreateInput!): RoundSemifinals!
  createRoundFinal(data: RoundFinalCreateInput!): RoundFinal!
  createMatchTournament(data: MatchTournamentCreateInput!): MatchTournament!
  createMatchSingle(data: MatchSingleCreateInput!): MatchSingle!
  updateMemberRef(
    data: MemberRefUpdateInput!
    where: MemberRefWhereUniqueInput!
  ): MemberRef
  updateOrganization(
    data: OrganizationUpdateInput!
    where: OrganizationWhereUniqueInput!
  ): Organization
  updateTournament(
    data: TournamentUpdateInput!
    where: TournamentWhereUniqueInput!
  ): Tournament
  updateTeamMatchTournament(
    data: TeamMatchTournamentUpdateInput!
    where: TeamMatchTournamentWhereUniqueInput!
  ): TeamMatchTournament
  updateTeamMatchSingle(
    data: TeamMatchSingleUpdateInput!
    where: TeamMatchSingleWhereUniqueInput!
  ): TeamMatchSingle
  updateMatchTournament(
    data: MatchTournamentUpdateInput!
    where: MatchTournamentWhereUniqueInput!
  ): MatchTournament
  updateMatchSingle(
    data: MatchSingleUpdateInput!
    where: MatchSingleWhereUniqueInput!
  ): MatchSingle
  deleteMemberRef(where: MemberRefWhereUniqueInput!): MemberRef
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteTournament(where: TournamentWhereUniqueInput!): Tournament
  deleteTeamMatchTournament(
    where: TeamMatchTournamentWhereUniqueInput!
  ): TeamMatchTournament
  deleteTeamMatchSingle(
    where: TeamMatchSingleWhereUniqueInput!
  ): TeamMatchSingle
  deleteMatchTournament(
    where: MatchTournamentWhereUniqueInput!
  ): MatchTournament
  deleteMatchSingle(where: MatchSingleWhereUniqueInput!): MatchSingle
  upsertMemberRef(
    where: MemberRefWhereUniqueInput!
    create: MemberRefCreateInput!
    update: MemberRefUpdateInput!
  ): MemberRef!
  upsertOrganization(
    where: OrganizationWhereUniqueInput!
    create: OrganizationCreateInput!
    update: OrganizationUpdateInput!
  ): Organization!
  upsertTournament(
    where: TournamentWhereUniqueInput!
    create: TournamentCreateInput!
    update: TournamentUpdateInput!
  ): Tournament!
  upsertTeamMatchTournament(
    where: TeamMatchTournamentWhereUniqueInput!
    create: TeamMatchTournamentCreateInput!
    update: TeamMatchTournamentUpdateInput!
  ): TeamMatchTournament!
  upsertTeamMatchSingle(
    where: TeamMatchSingleWhereUniqueInput!
    create: TeamMatchSingleCreateInput!
    update: TeamMatchSingleUpdateInput!
  ): TeamMatchSingle!
  upsertMatchTournament(
    where: MatchTournamentWhereUniqueInput!
    create: MatchTournamentCreateInput!
    update: MatchTournamentUpdateInput!
  ): MatchTournament!
  upsertMatchSingle(
    where: MatchSingleWhereUniqueInput!
    create: MatchSingleCreateInput!
    update: MatchSingleUpdateInput!
  ): MatchSingle!
  updateManyMemberRefs(
    data: MemberRefUpdateInput!
    where: MemberRefWhereInput
  ): BatchPayload!
  updateManyOrganizations(
    data: OrganizationUpdateInput!
    where: OrganizationWhereInput
  ): BatchPayload!
  updateManyTournaments(
    data: TournamentUpdateInput!
    where: TournamentWhereInput
  ): BatchPayload!
  updateManyTeamMatchTournaments(
    data: TeamMatchTournamentUpdateInput!
    where: TeamMatchTournamentWhereInput
  ): BatchPayload!
  updateManyTeamMatchSingles(
    data: TeamMatchSingleUpdateInput!
    where: TeamMatchSingleWhereInput
  ): BatchPayload!
  updateManyRoundLastSixteens(
    data: RoundLastSixteenUpdateInput!
    where: RoundLastSixteenWhereInput
  ): BatchPayload!
  updateManyRoundQuarterfinalses(
    data: RoundQuarterfinalsUpdateInput!
    where: RoundQuarterfinalsWhereInput
  ): BatchPayload!
  updateManyRoundSemifinalses(
    data: RoundSemifinalsUpdateInput!
    where: RoundSemifinalsWhereInput
  ): BatchPayload!
  updateManyRoundFinals(
    data: RoundFinalUpdateInput!
    where: RoundFinalWhereInput
  ): BatchPayload!
  updateManyMatchTournaments(
    data: MatchTournamentUpdateInput!
    where: MatchTournamentWhereInput
  ): BatchPayload!
  updateManyMatchSingles(
    data: MatchSingleUpdateInput!
    where: MatchSingleWhereInput
  ): BatchPayload!
  deleteManyMemberRefs(where: MemberRefWhereInput): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  deleteManyTournaments(where: TournamentWhereInput): BatchPayload!
  deleteManyTeamMatchTournaments(
    where: TeamMatchTournamentWhereInput
  ): BatchPayload!
  deleteManyTeamMatchSingles(where: TeamMatchSingleWhereInput): BatchPayload!
  deleteManyRoundLastSixteens(where: RoundLastSixteenWhereInput): BatchPayload!
  deleteManyRoundQuarterfinalses(
    where: RoundQuarterfinalsWhereInput
  ): BatchPayload!
  deleteManyRoundSemifinalses(where: RoundSemifinalsWhereInput): BatchPayload!
  deleteManyRoundFinals(where: RoundFinalWhereInput): BatchPayload!
  deleteManyMatchTournaments(where: MatchTournamentWhereInput): BatchPayload!
  deleteManyMatchSingles(where: MatchSingleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

type Organization {
  key: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  memberRefs(
    where: MemberRefWhereInput
    orderBy: MemberRefOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [MemberRef!]
}

"""
A connection to a list of items.
"""
type OrganizationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  key: String!
  name: String!
  memberRefs: MemberRefCreateManyWithoutOrganizationInput
}

input OrganizationCreateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutMemberRefsInput {
  create: OrganizationCreateWithoutMemberRefsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutMemberRefsInput {
  key: String!
  name: String!
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  The item at the end of the edge.
  """
  node: Organization!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OrganizationOrderByInput {
  key_ASC
  key_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  id_ASC
  id_DESC
}

type OrganizationPreviousValues {
  key: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrganizationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrganizationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrganizationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
}

input OrganizationUpdateDataInput {
  key: String
  name: String
  memberRefs: MemberRefUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateInput {
  key: String
  name: String
  memberRefs: MemberRefUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  delete: Boolean
  update: OrganizationUpdateDataInput
  upsert: OrganizationUpsertNestedInput
}

input OrganizationUpdateOneWithoutMemberRefsInput {
  create: OrganizationCreateWithoutMemberRefsInput
  connect: OrganizationWhereUniqueInput
  delete: Boolean
  update: OrganizationUpdateWithoutMemberRefsDataInput
  upsert: OrganizationUpsertWithoutMemberRefsInput
}

input OrganizationUpdateWithoutMemberRefsDataInput {
  key: String
  name: String
}

input OrganizationUpsertNestedInput {
  update: OrganizationUpdateDataInput!
  create: OrganizationCreateInput!
}

input OrganizationUpsertWithoutMemberRefsInput {
  update: OrganizationUpdateWithoutMemberRefsDataInput!
  create: OrganizationCreateWithoutMemberRefsInput!
}

input OrganizationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrganizationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrganizationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrganizationWhereInput!]
  key: String

  """
  All values that are not equal to given value.
  """
  key_not: String

  """
  All values that are contained in given list.
  """
  key_in: [String!]

  """
  All values that are not contained in given list.
  """
  key_not_in: [String!]

  """
  All values less than the given value.
  """
  key_lt: String

  """
  All values less than or equal the given value.
  """
  key_lte: String

  """
  All values greater than the given value.
  """
  key_gt: String

  """
  All values greater than or equal the given value.
  """
  key_gte: String

  """
  All values containing the given string.
  """
  key_contains: String

  """
  All values not containing the given string.
  """
  key_not_contains: String

  """
  All values starting with the given string.
  """
  key_starts_with: String

  """
  All values not starting with the given string.
  """
  key_not_starts_with: String

  """
  All values ending with the given string.
  """
  key_ends_with: String

  """
  All values not ending with the given string.
  """
  key_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  memberRefs_every: MemberRefWhereInput
  memberRefs_some: MemberRefWhereInput
  memberRefs_none: MemberRefWhereInput
}

input OrganizationWhereUniqueInput {
  key: String
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  memberRefs(
    where: MemberRefWhereInput
    orderBy: MemberRefOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [MemberRef]!
  organizations(
    where: OrganizationWhereInput
    orderBy: OrganizationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Organization]!
  tournaments(
    where: TournamentWhereInput
    orderBy: TournamentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tournament]!
  teamMatchTournaments(
    where: TeamMatchTournamentWhereInput
    orderBy: TeamMatchTournamentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [TeamMatchTournament]!
  teamMatchSingles(
    where: TeamMatchSingleWhereInput
    orderBy: TeamMatchSingleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [TeamMatchSingle]!
  roundLastSixteens(
    where: RoundLastSixteenWhereInput
    orderBy: RoundLastSixteenOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RoundLastSixteen]!
  roundQuarterfinalses(
    where: RoundQuarterfinalsWhereInput
    orderBy: RoundQuarterfinalsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RoundQuarterfinals]!
  roundSemifinalses(
    where: RoundSemifinalsWhereInput
    orderBy: RoundSemifinalsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RoundSemifinals]!
  roundFinals(
    where: RoundFinalWhereInput
    orderBy: RoundFinalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RoundFinal]!
  matchTournaments(
    where: MatchTournamentWhereInput
    orderBy: MatchTournamentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [MatchTournament]!
  matchSingles(
    where: MatchSingleWhereInput
    orderBy: MatchSingleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [MatchSingle]!
  memberRef(where: MemberRefWhereUniqueInput!): MemberRef
  organization(where: OrganizationWhereUniqueInput!): Organization
  tournament(where: TournamentWhereUniqueInput!): Tournament
  teamMatchTournament(
    where: TeamMatchTournamentWhereUniqueInput!
  ): TeamMatchTournament
  teamMatchSingle(where: TeamMatchSingleWhereUniqueInput!): TeamMatchSingle
  matchTournament(where: MatchTournamentWhereUniqueInput!): MatchTournament
  matchSingle(where: MatchSingleWhereUniqueInput!): MatchSingle
  memberRefsConnection(
    where: MemberRefWhereInput
    orderBy: MemberRefOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): MemberRefConnection!
  organizationsConnection(
    where: OrganizationWhereInput
    orderBy: OrganizationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OrganizationConnection!
  tournamentsConnection(
    where: TournamentWhereInput
    orderBy: TournamentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TournamentConnection!
  teamMatchTournamentsConnection(
    where: TeamMatchTournamentWhereInput
    orderBy: TeamMatchTournamentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TeamMatchTournamentConnection!
  teamMatchSinglesConnection(
    where: TeamMatchSingleWhereInput
    orderBy: TeamMatchSingleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TeamMatchSingleConnection!
  roundLastSixteensConnection(
    where: RoundLastSixteenWhereInput
    orderBy: RoundLastSixteenOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RoundLastSixteenConnection!
  roundQuarterfinalsesConnection(
    where: RoundQuarterfinalsWhereInput
    orderBy: RoundQuarterfinalsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RoundQuarterfinalsConnection!
  roundSemifinalsesConnection(
    where: RoundSemifinalsWhereInput
    orderBy: RoundSemifinalsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RoundSemifinalsConnection!
  roundFinalsConnection(
    where: RoundFinalWhereInput
    orderBy: RoundFinalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RoundFinalConnection!
  matchTournamentsConnection(
    where: MatchTournamentWhereInput
    orderBy: MatchTournamentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): MatchTournamentConnection!
  matchSinglesConnection(
    where: MatchSingleWhereInput
    orderBy: MatchSingleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): MatchSingleConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

enum Role {
  Admin
  Member
}

type RoundFinal {
  match(where: MatchTournamentWhereInput): MatchTournament!
  tournament(where: TournamentWhereInput): Tournament!
  _ignore_: String
}

"""
A connection to a list of items.
"""
type RoundFinalConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RoundFinalEdge]!
  aggregate: AggregateRoundFinal!
}

input RoundFinalCreateInput {
  _ignore_: String
  match: MatchTournamentCreateOneInput!
  tournament: TournamentCreateOneWithoutRoundFinalInput!
}

input RoundFinalCreateOneWithoutTournamentInput {
  create: RoundFinalCreateWithoutTournamentInput
}

input RoundFinalCreateWithoutTournamentInput {
  _ignore_: String
  match: MatchTournamentCreateOneInput!
}

"""
An edge in a connection.
"""
type RoundFinalEdge {
  """
  The item at the end of the edge.
  """
  node: RoundFinal!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RoundFinalOrderByInput {
  _ignore__ASC
  _ignore__DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoundFinalPreviousValues {
  _ignore_: String
}

type RoundFinalSubscriptionPayload {
  mutation: MutationType!
  node: RoundFinal
  updatedFields: [String!]
  previousValues: RoundFinalPreviousValues
}

input RoundFinalSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RoundFinalSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RoundFinalSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RoundFinalSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoundFinalWhereInput
}

input RoundFinalUpdateInput {
  _ignore_: String
  match: MatchTournamentUpdateOneInput
  tournament: TournamentUpdateOneWithoutRoundFinalInput
}

input RoundFinalUpdateOneWithoutTournamentInput {
  create: RoundFinalCreateWithoutTournamentInput
  disconnect: Boolean
  delete: Boolean
  update: RoundFinalUpdateWithoutTournamentDataInput
  upsert: RoundFinalUpsertWithoutTournamentInput
}

input RoundFinalUpdateWithoutTournamentDataInput {
  _ignore_: String
  match: MatchTournamentUpdateOneInput
}

input RoundFinalUpsertWithoutTournamentInput {
  update: RoundFinalUpdateWithoutTournamentDataInput!
  create: RoundFinalCreateWithoutTournamentInput!
}

input RoundFinalWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RoundFinalWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RoundFinalWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RoundFinalWhereInput!]
  _ignore_: String

  """
  All values that are not equal to given value.
  """
  _ignore__not: String

  """
  All values that are contained in given list.
  """
  _ignore__in: [String!]

  """
  All values that are not contained in given list.
  """
  _ignore__not_in: [String!]

  """
  All values less than the given value.
  """
  _ignore__lt: String

  """
  All values less than or equal the given value.
  """
  _ignore__lte: String

  """
  All values greater than the given value.
  """
  _ignore__gt: String

  """
  All values greater than or equal the given value.
  """
  _ignore__gte: String

  """
  All values containing the given string.
  """
  _ignore__contains: String

  """
  All values not containing the given string.
  """
  _ignore__not_contains: String

  """
  All values starting with the given string.
  """
  _ignore__starts_with: String

  """
  All values not starting with the given string.
  """
  _ignore__not_starts_with: String

  """
  All values ending with the given string.
  """
  _ignore__ends_with: String

  """
  All values not ending with the given string.
  """
  _ignore__not_ends_with: String
  match: MatchTournamentWhereInput
  tournament: TournamentWhereInput
}

type RoundLastSixteen {
  matchA(where: MatchTournamentWhereInput): MatchTournament!
  matchB(where: MatchTournamentWhereInput): MatchTournament!
  matchC(where: MatchTournamentWhereInput): MatchTournament!
  matchD(where: MatchTournamentWhereInput): MatchTournament!
  matchE(where: MatchTournamentWhereInput): MatchTournament!
  matchF(where: MatchTournamentWhereInput): MatchTournament!
  matchG(where: MatchTournamentWhereInput): MatchTournament!
  matchH(where: MatchTournamentWhereInput): MatchTournament!
  tournament(where: TournamentWhereInput): Tournament!
  _ignore_: String
}

"""
A connection to a list of items.
"""
type RoundLastSixteenConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RoundLastSixteenEdge]!
  aggregate: AggregateRoundLastSixteen!
}

input RoundLastSixteenCreateInput {
  _ignore_: String
  matchA: MatchTournamentCreateOneInput!
  matchB: MatchTournamentCreateOneInput!
  matchC: MatchTournamentCreateOneInput!
  matchD: MatchTournamentCreateOneInput!
  matchE: MatchTournamentCreateOneInput!
  matchF: MatchTournamentCreateOneInput!
  matchG: MatchTournamentCreateOneInput!
  matchH: MatchTournamentCreateOneInput!
  tournament: TournamentCreateOneWithoutRoundLastSixteenInput!
}

input RoundLastSixteenCreateOneWithoutTournamentInput {
  create: RoundLastSixteenCreateWithoutTournamentInput
}

input RoundLastSixteenCreateWithoutTournamentInput {
  _ignore_: String
  matchA: MatchTournamentCreateOneInput!
  matchB: MatchTournamentCreateOneInput!
  matchC: MatchTournamentCreateOneInput!
  matchD: MatchTournamentCreateOneInput!
  matchE: MatchTournamentCreateOneInput!
  matchF: MatchTournamentCreateOneInput!
  matchG: MatchTournamentCreateOneInput!
  matchH: MatchTournamentCreateOneInput!
}

"""
An edge in a connection.
"""
type RoundLastSixteenEdge {
  """
  The item at the end of the edge.
  """
  node: RoundLastSixteen!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RoundLastSixteenOrderByInput {
  _ignore__ASC
  _ignore__DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoundLastSixteenPreviousValues {
  _ignore_: String
}

type RoundLastSixteenSubscriptionPayload {
  mutation: MutationType!
  node: RoundLastSixteen
  updatedFields: [String!]
  previousValues: RoundLastSixteenPreviousValues
}

input RoundLastSixteenSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RoundLastSixteenSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RoundLastSixteenSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RoundLastSixteenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoundLastSixteenWhereInput
}

input RoundLastSixteenUpdateInput {
  _ignore_: String
  matchA: MatchTournamentUpdateOneInput
  matchB: MatchTournamentUpdateOneInput
  matchC: MatchTournamentUpdateOneInput
  matchD: MatchTournamentUpdateOneInput
  matchE: MatchTournamentUpdateOneInput
  matchF: MatchTournamentUpdateOneInput
  matchG: MatchTournamentUpdateOneInput
  matchH: MatchTournamentUpdateOneInput
  tournament: TournamentUpdateOneWithoutRoundLastSixteenInput
}

input RoundLastSixteenUpdateOneWithoutTournamentInput {
  create: RoundLastSixteenCreateWithoutTournamentInput
  disconnect: Boolean
  delete: Boolean
  update: RoundLastSixteenUpdateWithoutTournamentDataInput
  upsert: RoundLastSixteenUpsertWithoutTournamentInput
}

input RoundLastSixteenUpdateWithoutTournamentDataInput {
  _ignore_: String
  matchA: MatchTournamentUpdateOneInput
  matchB: MatchTournamentUpdateOneInput
  matchC: MatchTournamentUpdateOneInput
  matchD: MatchTournamentUpdateOneInput
  matchE: MatchTournamentUpdateOneInput
  matchF: MatchTournamentUpdateOneInput
  matchG: MatchTournamentUpdateOneInput
  matchH: MatchTournamentUpdateOneInput
}

input RoundLastSixteenUpsertWithoutTournamentInput {
  update: RoundLastSixteenUpdateWithoutTournamentDataInput!
  create: RoundLastSixteenCreateWithoutTournamentInput!
}

input RoundLastSixteenWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RoundLastSixteenWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RoundLastSixteenWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RoundLastSixteenWhereInput!]
  _ignore_: String

  """
  All values that are not equal to given value.
  """
  _ignore__not: String

  """
  All values that are contained in given list.
  """
  _ignore__in: [String!]

  """
  All values that are not contained in given list.
  """
  _ignore__not_in: [String!]

  """
  All values less than the given value.
  """
  _ignore__lt: String

  """
  All values less than or equal the given value.
  """
  _ignore__lte: String

  """
  All values greater than the given value.
  """
  _ignore__gt: String

  """
  All values greater than or equal the given value.
  """
  _ignore__gte: String

  """
  All values containing the given string.
  """
  _ignore__contains: String

  """
  All values not containing the given string.
  """
  _ignore__not_contains: String

  """
  All values starting with the given string.
  """
  _ignore__starts_with: String

  """
  All values not starting with the given string.
  """
  _ignore__not_starts_with: String

  """
  All values ending with the given string.
  """
  _ignore__ends_with: String

  """
  All values not ending with the given string.
  """
  _ignore__not_ends_with: String
  matchA: MatchTournamentWhereInput
  matchB: MatchTournamentWhereInput
  matchC: MatchTournamentWhereInput
  matchD: MatchTournamentWhereInput
  matchE: MatchTournamentWhereInput
  matchF: MatchTournamentWhereInput
  matchG: MatchTournamentWhereInput
  matchH: MatchTournamentWhereInput
  tournament: TournamentWhereInput
}

type RoundQuarterfinals {
  matchA(where: MatchTournamentWhereInput): MatchTournament!
  matchB(where: MatchTournamentWhereInput): MatchTournament!
  matchC(where: MatchTournamentWhereInput): MatchTournament!
  matchD(where: MatchTournamentWhereInput): MatchTournament!
  tournament(where: TournamentWhereInput): Tournament!
  _ignore_: String
}

"""
A connection to a list of items.
"""
type RoundQuarterfinalsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RoundQuarterfinalsEdge]!
  aggregate: AggregateRoundQuarterfinals!
}

input RoundQuarterfinalsCreateInput {
  _ignore_: String
  matchA: MatchTournamentCreateOneInput!
  matchB: MatchTournamentCreateOneInput!
  matchC: MatchTournamentCreateOneInput!
  matchD: MatchTournamentCreateOneInput!
  tournament: TournamentCreateOneWithoutRoundQuarterfinalsInput!
}

input RoundQuarterfinalsCreateOneWithoutTournamentInput {
  create: RoundQuarterfinalsCreateWithoutTournamentInput
}

input RoundQuarterfinalsCreateWithoutTournamentInput {
  _ignore_: String
  matchA: MatchTournamentCreateOneInput!
  matchB: MatchTournamentCreateOneInput!
  matchC: MatchTournamentCreateOneInput!
  matchD: MatchTournamentCreateOneInput!
}

"""
An edge in a connection.
"""
type RoundQuarterfinalsEdge {
  """
  The item at the end of the edge.
  """
  node: RoundQuarterfinals!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RoundQuarterfinalsOrderByInput {
  _ignore__ASC
  _ignore__DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoundQuarterfinalsPreviousValues {
  _ignore_: String
}

type RoundQuarterfinalsSubscriptionPayload {
  mutation: MutationType!
  node: RoundQuarterfinals
  updatedFields: [String!]
  previousValues: RoundQuarterfinalsPreviousValues
}

input RoundQuarterfinalsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RoundQuarterfinalsSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RoundQuarterfinalsSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RoundQuarterfinalsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoundQuarterfinalsWhereInput
}

input RoundQuarterfinalsUpdateInput {
  _ignore_: String
  matchA: MatchTournamentUpdateOneInput
  matchB: MatchTournamentUpdateOneInput
  matchC: MatchTournamentUpdateOneInput
  matchD: MatchTournamentUpdateOneInput
  tournament: TournamentUpdateOneWithoutRoundQuarterfinalsInput
}

input RoundQuarterfinalsUpdateOneWithoutTournamentInput {
  create: RoundQuarterfinalsCreateWithoutTournamentInput
  disconnect: Boolean
  delete: Boolean
  update: RoundQuarterfinalsUpdateWithoutTournamentDataInput
  upsert: RoundQuarterfinalsUpsertWithoutTournamentInput
}

input RoundQuarterfinalsUpdateWithoutTournamentDataInput {
  _ignore_: String
  matchA: MatchTournamentUpdateOneInput
  matchB: MatchTournamentUpdateOneInput
  matchC: MatchTournamentUpdateOneInput
  matchD: MatchTournamentUpdateOneInput
}

input RoundQuarterfinalsUpsertWithoutTournamentInput {
  update: RoundQuarterfinalsUpdateWithoutTournamentDataInput!
  create: RoundQuarterfinalsCreateWithoutTournamentInput!
}

input RoundQuarterfinalsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RoundQuarterfinalsWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RoundQuarterfinalsWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RoundQuarterfinalsWhereInput!]
  _ignore_: String

  """
  All values that are not equal to given value.
  """
  _ignore__not: String

  """
  All values that are contained in given list.
  """
  _ignore__in: [String!]

  """
  All values that are not contained in given list.
  """
  _ignore__not_in: [String!]

  """
  All values less than the given value.
  """
  _ignore__lt: String

  """
  All values less than or equal the given value.
  """
  _ignore__lte: String

  """
  All values greater than the given value.
  """
  _ignore__gt: String

  """
  All values greater than or equal the given value.
  """
  _ignore__gte: String

  """
  All values containing the given string.
  """
  _ignore__contains: String

  """
  All values not containing the given string.
  """
  _ignore__not_contains: String

  """
  All values starting with the given string.
  """
  _ignore__starts_with: String

  """
  All values not starting with the given string.
  """
  _ignore__not_starts_with: String

  """
  All values ending with the given string.
  """
  _ignore__ends_with: String

  """
  All values not ending with the given string.
  """
  _ignore__not_ends_with: String
  matchA: MatchTournamentWhereInput
  matchB: MatchTournamentWhereInput
  matchC: MatchTournamentWhereInput
  matchD: MatchTournamentWhereInput
  tournament: TournamentWhereInput
}

type RoundSemifinals {
  matchA(where: MatchTournamentWhereInput): MatchTournament!
  matchB(where: MatchTournamentWhereInput): MatchTournament!
  tournament(where: TournamentWhereInput): Tournament!
  _ignore_: String
}

"""
A connection to a list of items.
"""
type RoundSemifinalsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RoundSemifinalsEdge]!
  aggregate: AggregateRoundSemifinals!
}

input RoundSemifinalsCreateInput {
  _ignore_: String
  matchA: MatchTournamentCreateOneInput!
  matchB: MatchTournamentCreateOneInput!
  tournament: TournamentCreateOneWithoutRoundSemifinalsInput!
}

input RoundSemifinalsCreateOneWithoutTournamentInput {
  create: RoundSemifinalsCreateWithoutTournamentInput
}

input RoundSemifinalsCreateWithoutTournamentInput {
  _ignore_: String
  matchA: MatchTournamentCreateOneInput!
  matchB: MatchTournamentCreateOneInput!
}

"""
An edge in a connection.
"""
type RoundSemifinalsEdge {
  """
  The item at the end of the edge.
  """
  node: RoundSemifinals!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RoundSemifinalsOrderByInput {
  _ignore__ASC
  _ignore__DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoundSemifinalsPreviousValues {
  _ignore_: String
}

type RoundSemifinalsSubscriptionPayload {
  mutation: MutationType!
  node: RoundSemifinals
  updatedFields: [String!]
  previousValues: RoundSemifinalsPreviousValues
}

input RoundSemifinalsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RoundSemifinalsSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RoundSemifinalsSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RoundSemifinalsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoundSemifinalsWhereInput
}

input RoundSemifinalsUpdateInput {
  _ignore_: String
  matchA: MatchTournamentUpdateOneInput
  matchB: MatchTournamentUpdateOneInput
  tournament: TournamentUpdateOneWithoutRoundSemifinalsInput
}

input RoundSemifinalsUpdateOneWithoutTournamentInput {
  create: RoundSemifinalsCreateWithoutTournamentInput
  disconnect: Boolean
  delete: Boolean
  update: RoundSemifinalsUpdateWithoutTournamentDataInput
  upsert: RoundSemifinalsUpsertWithoutTournamentInput
}

input RoundSemifinalsUpdateWithoutTournamentDataInput {
  _ignore_: String
  matchA: MatchTournamentUpdateOneInput
  matchB: MatchTournamentUpdateOneInput
}

input RoundSemifinalsUpsertWithoutTournamentInput {
  update: RoundSemifinalsUpdateWithoutTournamentDataInput!
  create: RoundSemifinalsCreateWithoutTournamentInput!
}

input RoundSemifinalsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RoundSemifinalsWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RoundSemifinalsWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RoundSemifinalsWhereInput!]
  _ignore_: String

  """
  All values that are not equal to given value.
  """
  _ignore__not: String

  """
  All values that are contained in given list.
  """
  _ignore__in: [String!]

  """
  All values that are not contained in given list.
  """
  _ignore__not_in: [String!]

  """
  All values less than the given value.
  """
  _ignore__lt: String

  """
  All values less than or equal the given value.
  """
  _ignore__lte: String

  """
  All values greater than the given value.
  """
  _ignore__gt: String

  """
  All values greater than or equal the given value.
  """
  _ignore__gte: String

  """
  All values containing the given string.
  """
  _ignore__contains: String

  """
  All values not containing the given string.
  """
  _ignore__not_contains: String

  """
  All values starting with the given string.
  """
  _ignore__starts_with: String

  """
  All values not starting with the given string.
  """
  _ignore__not_starts_with: String

  """
  All values ending with the given string.
  """
  _ignore__ends_with: String

  """
  All values not ending with the given string.
  """
  _ignore__not_ends_with: String
  matchA: MatchTournamentWhereInput
  matchB: MatchTournamentWhereInput
  tournament: TournamentWhereInput
}

type Subscription {
  memberRef(
    where: MemberRefSubscriptionWhereInput
  ): MemberRefSubscriptionPayload
  organization(
    where: OrganizationSubscriptionWhereInput
  ): OrganizationSubscriptionPayload
  tournament(
    where: TournamentSubscriptionWhereInput
  ): TournamentSubscriptionPayload
  teamMatchTournament(
    where: TeamMatchTournamentSubscriptionWhereInput
  ): TeamMatchTournamentSubscriptionPayload
  teamMatchSingle(
    where: TeamMatchSingleSubscriptionWhereInput
  ): TeamMatchSingleSubscriptionPayload
  roundLastSixteen(
    where: RoundLastSixteenSubscriptionWhereInput
  ): RoundLastSixteenSubscriptionPayload
  roundQuarterfinals(
    where: RoundQuarterfinalsSubscriptionWhereInput
  ): RoundQuarterfinalsSubscriptionPayload
  roundSemifinals(
    where: RoundSemifinalsSubscriptionWhereInput
  ): RoundSemifinalsSubscriptionPayload
  roundFinal(
    where: RoundFinalSubscriptionWhereInput
  ): RoundFinalSubscriptionPayload
  matchTournament(
    where: MatchTournamentSubscriptionWhereInput
  ): MatchTournamentSubscriptionPayload
  matchSingle(
    where: MatchSingleSubscriptionWhereInput
  ): MatchSingleSubscriptionPayload
}

type TeamMatchSingle implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  size: Int!
  playerRefs(
    where: MemberRefWhereInput
    orderBy: MemberRefOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [MemberRef!]
}

"""
A connection to a list of items.
"""
type TeamMatchSingleConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TeamMatchSingleEdge]!
  aggregate: AggregateTeamMatchSingle!
}

input TeamMatchSingleCreateInput {
  size: Int!
  playerRefs: MemberRefCreateManyInput
}

input TeamMatchSingleCreateOneInput {
  create: TeamMatchSingleCreateInput
  connect: TeamMatchSingleWhereUniqueInput
}

"""
An edge in a connection.
"""
type TeamMatchSingleEdge {
  """
  The item at the end of the edge.
  """
  node: TeamMatchSingle!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TeamMatchSingleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  size_ASC
  size_DESC
}

type TeamMatchSinglePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  size: Int!
}

type TeamMatchSingleSubscriptionPayload {
  mutation: MutationType!
  node: TeamMatchSingle
  updatedFields: [String!]
  previousValues: TeamMatchSinglePreviousValues
}

input TeamMatchSingleSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TeamMatchSingleSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TeamMatchSingleSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TeamMatchSingleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamMatchSingleWhereInput
}

input TeamMatchSingleUpdateDataInput {
  size: Int
  playerRefs: MemberRefUpdateManyInput
}

input TeamMatchSingleUpdateInput {
  size: Int
  playerRefs: MemberRefUpdateManyInput
}

input TeamMatchSingleUpdateOneInput {
  create: TeamMatchSingleCreateInput
  connect: TeamMatchSingleWhereUniqueInput
  delete: Boolean
  update: TeamMatchSingleUpdateDataInput
  upsert: TeamMatchSingleUpsertNestedInput
}

input TeamMatchSingleUpsertNestedInput {
  update: TeamMatchSingleUpdateDataInput!
  create: TeamMatchSingleCreateInput!
}

input TeamMatchSingleWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TeamMatchSingleWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TeamMatchSingleWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TeamMatchSingleWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  size: Int

  """
  All values that are not equal to given value.
  """
  size_not: Int

  """
  All values that are contained in given list.
  """
  size_in: [Int!]

  """
  All values that are not contained in given list.
  """
  size_not_in: [Int!]

  """
  All values less than the given value.
  """
  size_lt: Int

  """
  All values less than or equal the given value.
  """
  size_lte: Int

  """
  All values greater than the given value.
  """
  size_gt: Int

  """
  All values greater than or equal the given value.
  """
  size_gte: Int
  playerRefs_every: MemberRefWhereInput
  playerRefs_some: MemberRefWhereInput
  playerRefs_none: MemberRefWhereInput
}

input TeamMatchSingleWhereUniqueInput {
  id: ID
}

type TeamMatchTournament implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  tournament(where: TournamentWhereInput): Tournament!
  size: Int!
  playerRefs(
    where: MemberRefWhereInput
    orderBy: MemberRefOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [MemberRef!]
}

"""
A connection to a list of items.
"""
type TeamMatchTournamentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TeamMatchTournamentEdge]!
  aggregate: AggregateTeamMatchTournament!
}

input TeamMatchTournamentCreateInput {
  size: Int!
  tournament: TournamentCreateOneWithoutTeamsInput!
  playerRefs: MemberRefCreateManyInput
}

input TeamMatchTournamentCreateManyWithoutTournamentInput {
  create: [TeamMatchTournamentCreateWithoutTournamentInput!]
  connect: [TeamMatchTournamentWhereUniqueInput!]
}

input TeamMatchTournamentCreateOneInput {
  create: TeamMatchTournamentCreateInput
  connect: TeamMatchTournamentWhereUniqueInput
}

input TeamMatchTournamentCreateWithoutTournamentInput {
  size: Int!
  playerRefs: MemberRefCreateManyInput
}

"""
An edge in a connection.
"""
type TeamMatchTournamentEdge {
  """
  The item at the end of the edge.
  """
  node: TeamMatchTournament!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TeamMatchTournamentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  size_ASC
  size_DESC
}

type TeamMatchTournamentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  size: Int!
}

type TeamMatchTournamentSubscriptionPayload {
  mutation: MutationType!
  node: TeamMatchTournament
  updatedFields: [String!]
  previousValues: TeamMatchTournamentPreviousValues
}

input TeamMatchTournamentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TeamMatchTournamentSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TeamMatchTournamentSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TeamMatchTournamentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamMatchTournamentWhereInput
}

input TeamMatchTournamentUpdateDataInput {
  size: Int
  tournament: TournamentUpdateOneWithoutTeamsInput
  playerRefs: MemberRefUpdateManyInput
}

input TeamMatchTournamentUpdateInput {
  size: Int
  tournament: TournamentUpdateOneWithoutTeamsInput
  playerRefs: MemberRefUpdateManyInput
}

input TeamMatchTournamentUpdateManyWithoutTournamentInput {
  create: [TeamMatchTournamentCreateWithoutTournamentInput!]
  connect: [TeamMatchTournamentWhereUniqueInput!]
  disconnect: [TeamMatchTournamentWhereUniqueInput!]
  delete: [TeamMatchTournamentWhereUniqueInput!]
  update: [TeamMatchTournamentUpdateWithWhereUniqueWithoutTournamentInput!]
  upsert: [TeamMatchTournamentUpsertWithWhereUniqueWithoutTournamentInput!]
}

input TeamMatchTournamentUpdateOneInput {
  create: TeamMatchTournamentCreateInput
  connect: TeamMatchTournamentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamMatchTournamentUpdateDataInput
  upsert: TeamMatchTournamentUpsertNestedInput
}

input TeamMatchTournamentUpdateWithoutTournamentDataInput {
  size: Int
  playerRefs: MemberRefUpdateManyInput
}

input TeamMatchTournamentUpdateWithWhereUniqueWithoutTournamentInput {
  where: TeamMatchTournamentWhereUniqueInput!
  data: TeamMatchTournamentUpdateWithoutTournamentDataInput!
}

input TeamMatchTournamentUpsertNestedInput {
  update: TeamMatchTournamentUpdateDataInput!
  create: TeamMatchTournamentCreateInput!
}

input TeamMatchTournamentUpsertWithWhereUniqueWithoutTournamentInput {
  where: TeamMatchTournamentWhereUniqueInput!
  update: TeamMatchTournamentUpdateWithoutTournamentDataInput!
  create: TeamMatchTournamentCreateWithoutTournamentInput!
}

input TeamMatchTournamentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TeamMatchTournamentWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TeamMatchTournamentWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TeamMatchTournamentWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  size: Int

  """
  All values that are not equal to given value.
  """
  size_not: Int

  """
  All values that are contained in given list.
  """
  size_in: [Int!]

  """
  All values that are not contained in given list.
  """
  size_not_in: [Int!]

  """
  All values less than the given value.
  """
  size_lt: Int

  """
  All values less than or equal the given value.
  """
  size_lte: Int

  """
  All values greater than the given value.
  """
  size_gt: Int

  """
  All values greater than or equal the given value.
  """
  size_gte: Int
  tournament: TournamentWhereInput
  playerRefs_every: MemberRefWhereInput
  playerRefs_some: MemberRefWhereInput
  playerRefs_none: MemberRefWhereInput
}

input TeamMatchTournamentWhereUniqueInput {
  id: ID
}

type Tournament implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  organization(where: OrganizationWhereInput): Organization!
  teamSize: Int!
  teams(
    where: TeamMatchTournamentWhereInput
    orderBy: TeamMatchTournamentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [TeamMatchTournament!]
  roundLastSixteen(where: RoundLastSixteenWhereInput): RoundLastSixteen
  roundQuarterfinals(where: RoundQuarterfinalsWhereInput): RoundQuarterfinals
  roundSemifinals(where: RoundSemifinalsWhereInput): RoundSemifinals
  roundFinal(where: RoundFinalWhereInput): RoundFinal
}

"""
A connection to a list of items.
"""
type TournamentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TournamentEdge]!
  aggregate: AggregateTournament!
}

input TournamentCreateInput {
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  teamSize: Int!
  organization: OrganizationCreateOneInput!
  teams: TeamMatchTournamentCreateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenCreateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsCreateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsCreateOneWithoutTournamentInput
  roundFinal: RoundFinalCreateOneWithoutTournamentInput
}

input TournamentCreateOneInput {
  create: TournamentCreateInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateOneWithoutRoundFinalInput {
  create: TournamentCreateWithoutRoundFinalInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateOneWithoutRoundLastSixteenInput {
  create: TournamentCreateWithoutRoundLastSixteenInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateOneWithoutRoundQuarterfinalsInput {
  create: TournamentCreateWithoutRoundQuarterfinalsInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateOneWithoutRoundSemifinalsInput {
  create: TournamentCreateWithoutRoundSemifinalsInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateOneWithoutTeamsInput {
  create: TournamentCreateWithoutTeamsInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateWithoutRoundFinalInput {
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  teamSize: Int!
  organization: OrganizationCreateOneInput!
  teams: TeamMatchTournamentCreateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenCreateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsCreateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsCreateOneWithoutTournamentInput
}

input TournamentCreateWithoutRoundLastSixteenInput {
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  teamSize: Int!
  organization: OrganizationCreateOneInput!
  teams: TeamMatchTournamentCreateManyWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsCreateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsCreateOneWithoutTournamentInput
  roundFinal: RoundFinalCreateOneWithoutTournamentInput
}

input TournamentCreateWithoutRoundQuarterfinalsInput {
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  teamSize: Int!
  organization: OrganizationCreateOneInput!
  teams: TeamMatchTournamentCreateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenCreateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsCreateOneWithoutTournamentInput
  roundFinal: RoundFinalCreateOneWithoutTournamentInput
}

input TournamentCreateWithoutRoundSemifinalsInput {
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  teamSize: Int!
  organization: OrganizationCreateOneInput!
  teams: TeamMatchTournamentCreateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenCreateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsCreateOneWithoutTournamentInput
  roundFinal: RoundFinalCreateOneWithoutTournamentInput
}

input TournamentCreateWithoutTeamsInput {
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  teamSize: Int!
  organization: OrganizationCreateOneInput!
  roundLastSixteen: RoundLastSixteenCreateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsCreateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsCreateOneWithoutTournamentInput
  roundFinal: RoundFinalCreateOneWithoutTournamentInput
}

"""
An edge in a connection.
"""
type TournamentEdge {
  """
  The item at the end of the edge.
  """
  node: Tournament!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TournamentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  status_ASC
  status_DESC
  discipline_ASC
  discipline_DESC
  teamSize_ASC
  teamSize_DESC
}

type TournamentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  teamSize: Int!
}

enum TournamentSize {
  Small
  Medium
  Large
}

enum TournamentStatus {
  New
  InProgress
  Finished
}

type TournamentSubscriptionPayload {
  mutation: MutationType!
  node: Tournament
  updatedFields: [String!]
  previousValues: TournamentPreviousValues
}

input TournamentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TournamentSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TournamentSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TournamentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TournamentWhereInput
}

input TournamentUpdateDataInput {
  name: String
  size: TournamentSize
  status: TournamentStatus
  discipline: Discipline
  teamSize: Int
  organization: OrganizationUpdateOneInput
  teams: TeamMatchTournamentUpdateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenUpdateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsUpdateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsUpdateOneWithoutTournamentInput
  roundFinal: RoundFinalUpdateOneWithoutTournamentInput
}

input TournamentUpdateInput {
  name: String
  size: TournamentSize
  status: TournamentStatus
  discipline: Discipline
  teamSize: Int
  organization: OrganizationUpdateOneInput
  teams: TeamMatchTournamentUpdateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenUpdateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsUpdateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsUpdateOneWithoutTournamentInput
  roundFinal: RoundFinalUpdateOneWithoutTournamentInput
}

input TournamentUpdateOneInput {
  create: TournamentCreateInput
  connect: TournamentWhereUniqueInput
  delete: Boolean
  update: TournamentUpdateDataInput
  upsert: TournamentUpsertNestedInput
}

input TournamentUpdateOneWithoutRoundFinalInput {
  create: TournamentCreateWithoutRoundFinalInput
  connect: TournamentWhereUniqueInput
  delete: Boolean
  update: TournamentUpdateWithoutRoundFinalDataInput
  upsert: TournamentUpsertWithoutRoundFinalInput
}

input TournamentUpdateOneWithoutRoundLastSixteenInput {
  create: TournamentCreateWithoutRoundLastSixteenInput
  connect: TournamentWhereUniqueInput
  delete: Boolean
  update: TournamentUpdateWithoutRoundLastSixteenDataInput
  upsert: TournamentUpsertWithoutRoundLastSixteenInput
}

input TournamentUpdateOneWithoutRoundQuarterfinalsInput {
  create: TournamentCreateWithoutRoundQuarterfinalsInput
  connect: TournamentWhereUniqueInput
  delete: Boolean
  update: TournamentUpdateWithoutRoundQuarterfinalsDataInput
  upsert: TournamentUpsertWithoutRoundQuarterfinalsInput
}

input TournamentUpdateOneWithoutRoundSemifinalsInput {
  create: TournamentCreateWithoutRoundSemifinalsInput
  connect: TournamentWhereUniqueInput
  delete: Boolean
  update: TournamentUpdateWithoutRoundSemifinalsDataInput
  upsert: TournamentUpsertWithoutRoundSemifinalsInput
}

input TournamentUpdateOneWithoutTeamsInput {
  create: TournamentCreateWithoutTeamsInput
  connect: TournamentWhereUniqueInput
  delete: Boolean
  update: TournamentUpdateWithoutTeamsDataInput
  upsert: TournamentUpsertWithoutTeamsInput
}

input TournamentUpdateWithoutRoundFinalDataInput {
  name: String
  size: TournamentSize
  status: TournamentStatus
  discipline: Discipline
  teamSize: Int
  organization: OrganizationUpdateOneInput
  teams: TeamMatchTournamentUpdateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenUpdateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsUpdateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsUpdateOneWithoutTournamentInput
}

input TournamentUpdateWithoutRoundLastSixteenDataInput {
  name: String
  size: TournamentSize
  status: TournamentStatus
  discipline: Discipline
  teamSize: Int
  organization: OrganizationUpdateOneInput
  teams: TeamMatchTournamentUpdateManyWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsUpdateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsUpdateOneWithoutTournamentInput
  roundFinal: RoundFinalUpdateOneWithoutTournamentInput
}

input TournamentUpdateWithoutRoundQuarterfinalsDataInput {
  name: String
  size: TournamentSize
  status: TournamentStatus
  discipline: Discipline
  teamSize: Int
  organization: OrganizationUpdateOneInput
  teams: TeamMatchTournamentUpdateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenUpdateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsUpdateOneWithoutTournamentInput
  roundFinal: RoundFinalUpdateOneWithoutTournamentInput
}

input TournamentUpdateWithoutRoundSemifinalsDataInput {
  name: String
  size: TournamentSize
  status: TournamentStatus
  discipline: Discipline
  teamSize: Int
  organization: OrganizationUpdateOneInput
  teams: TeamMatchTournamentUpdateManyWithoutTournamentInput
  roundLastSixteen: RoundLastSixteenUpdateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsUpdateOneWithoutTournamentInput
  roundFinal: RoundFinalUpdateOneWithoutTournamentInput
}

input TournamentUpdateWithoutTeamsDataInput {
  name: String
  size: TournamentSize
  status: TournamentStatus
  discipline: Discipline
  teamSize: Int
  organization: OrganizationUpdateOneInput
  roundLastSixteen: RoundLastSixteenUpdateOneWithoutTournamentInput
  roundQuarterfinals: RoundQuarterfinalsUpdateOneWithoutTournamentInput
  roundSemifinals: RoundSemifinalsUpdateOneWithoutTournamentInput
  roundFinal: RoundFinalUpdateOneWithoutTournamentInput
}

input TournamentUpsertNestedInput {
  update: TournamentUpdateDataInput!
  create: TournamentCreateInput!
}

input TournamentUpsertWithoutRoundFinalInput {
  update: TournamentUpdateWithoutRoundFinalDataInput!
  create: TournamentCreateWithoutRoundFinalInput!
}

input TournamentUpsertWithoutRoundLastSixteenInput {
  update: TournamentUpdateWithoutRoundLastSixteenDataInput!
  create: TournamentCreateWithoutRoundLastSixteenInput!
}

input TournamentUpsertWithoutRoundQuarterfinalsInput {
  update: TournamentUpdateWithoutRoundQuarterfinalsDataInput!
  create: TournamentCreateWithoutRoundQuarterfinalsInput!
}

input TournamentUpsertWithoutRoundSemifinalsInput {
  update: TournamentUpdateWithoutRoundSemifinalsDataInput!
  create: TournamentCreateWithoutRoundSemifinalsInput!
}

input TournamentUpsertWithoutTeamsInput {
  update: TournamentUpdateWithoutTeamsDataInput!
  create: TournamentCreateWithoutTeamsInput!
}

input TournamentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TournamentWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TournamentWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TournamentWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  size: TournamentSize

  """
  All values that are not equal to given value.
  """
  size_not: TournamentSize

  """
  All values that are contained in given list.
  """
  size_in: [TournamentSize!]

  """
  All values that are not contained in given list.
  """
  size_not_in: [TournamentSize!]
  status: TournamentStatus

  """
  All values that are not equal to given value.
  """
  status_not: TournamentStatus

  """
  All values that are contained in given list.
  """
  status_in: [TournamentStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [TournamentStatus!]
  discipline: Discipline

  """
  All values that are not equal to given value.
  """
  discipline_not: Discipline

  """
  All values that are contained in given list.
  """
  discipline_in: [Discipline!]

  """
  All values that are not contained in given list.
  """
  discipline_not_in: [Discipline!]
  teamSize: Int

  """
  All values that are not equal to given value.
  """
  teamSize_not: Int

  """
  All values that are contained in given list.
  """
  teamSize_in: [Int!]

  """
  All values that are not contained in given list.
  """
  teamSize_not_in: [Int!]

  """
  All values less than the given value.
  """
  teamSize_lt: Int

  """
  All values less than or equal the given value.
  """
  teamSize_lte: Int

  """
  All values greater than the given value.
  """
  teamSize_gt: Int

  """
  All values greater than or equal the given value.
  """
  teamSize_gte: Int
  organization: OrganizationWhereInput
  teams_every: TeamMatchTournamentWhereInput
  teams_some: TeamMatchTournamentWhereInput
  teams_none: TeamMatchTournamentWhereInput
  roundLastSixteen: RoundLastSixteenWhereInput
  roundQuarterfinals: RoundQuarterfinalsWhereInput
  roundSemifinals: RoundSemifinalsWhereInput
  roundFinal: RoundFinalWhereInput
}

input TournamentWhereUniqueInput {
  id: ID
}
