enum SortOrder {
  ASC
  DESC
}

input SortBy {
  key: String!
  order: SortOrder!
}

type OrganizationInfo {
  key: String! # unique identifier
  name: String!
}

type Organization {
  createdAt: String!
  lastModifiedAt: String!
  key: String! # unique identifier
  name: String!
  members: [MemberInfo!]!
  tournaments(
    status: [TournamentStatus!] # `or` condition
    sort: SortBy!
    page: Int!
    perPage: Int!
  ): [TournamentInfo]!
}

extend type Query {
  isOrganizationKeyUsed(key: String!): Boolean!
  organization(key: String!): Organization
}

extend type Mutation {
  # Every member can create an organization
  createOrganization(
    key: String! # unique identifier
    name: String!
  ): Organization
  # Promote a member to admin
  setMemberAsAdmin(organizationKey: String!, memberId: String!): Organization
  # Every member can add new members to the organization
  addMemberToOrganization(
    organizationKey: String!
    memberId: String!
  ): Organization
  # Only admin members can remove members from the organization
  removeMemberFromOrganization(
    organizationKey: String!
    memberId: String!
  ): Organization
}
