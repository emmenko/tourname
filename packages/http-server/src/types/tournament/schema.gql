enum Discipline {
  POOL_TABLE
  TABLE_TENNIS
}

enum TournamentSize {
  SMALL
  MEDIUM
  LARGE
  XLARGE
}

enum TournamentStatus {
  NEW
  IN_PROGRESS
  FINISHED
}

type PlayerInfo {
  id: String!
  email: String!
  name: String!
  picture: String!
}

type Team {
  key: String! # a short random token
  players: [PlayerInfo]!
}

type Match {
  id: String!
  createdAt: String!
  lastModifiedAt: String!
  discipline: Discipline!
  teamLeft: Team
  teamRight: Team
  winner: Team
  organizationKey: String!
  # If the tournamentId is not defined, it's considered as a 1vs1 match
  tournamentId: String
}

interface Tournament {
  id: String!
  createdAt: String!
  lastModifiedAt: String!
  discipline: Discipline!
  name: String!
  organizationKey: String!
  status: TournamentStatus!
  # At least 1 player
  teamSize: Int!
  teams: [Team]!
}

type TournamentInfo {
  id: String!
  createdAt: String!
  lastModifiedAt: String!
  discipline: Discipline!
  name: String!
  status: TournamentStatus!
  size: TournamentSize!
  teamSize: Int!
}

type TournamentSmall implements Tournament {
  id: String!
  createdAt: String!
  lastModifiedAt: String!
  discipline: Discipline!
  name: String!
  organizationKey: String!
  status: TournamentStatus!
  # At least 1 player
  teamSize: Int!
  # Small: 4 teams
  teams: [Team]!
  matchesLeg1: [Match]! # 2 matches
  matchesLeg2: Match # 1 match
}

type TournamentMedium implements Tournament {
  id: String!
  createdAt: String!
  lastModifiedAt: String!
  discipline: Discipline!
  name: String!
  organizationKey: String!
  status: TournamentStatus!
  # At least 1 player
  teamSize: Int!
  # Medium: 8 players
  teams: [Team]!
  matchesLeg1: [Match]! # 4 matches
  matchesLeg2: [Match]! # 2 matches
  matchesLeg3: Match # 1 match
}

type TournamentLarge implements Tournament {
  id: String!
  createdAt: String!
  lastModifiedAt: String!
  discipline: Discipline!
  name: String!
  organizationKey: String!
  status: TournamentStatus!
  # At least 1 player
  teamSize: Int!
  # Large: 16 players
  teams: [Team]!
  matchesLeg1: [Match]! # 8 matches
  matchesLeg2: [Match]! # 4 matches
  matchesLeg3: [Match]! # 2 matches
  matchesLeg4: Match # 1 match
}

type TournamentXLarge implements Tournament {
  id: String!
  createdAt: String!
  lastModifiedAt: String!
  discipline: Discipline!
  name: String!
  organizationKey: String!
  status: TournamentStatus!
  # At least 1 player
  teamSize: Int!
  # XLarge: 32 players
  teams: [Team]!
  matchesLeg1: [Match]! # 16 matches
  matchesLeg2: [Match]! # 8 matches
  matchesLeg3: [Match]! # 4 matches
  matchesLeg4: [Match]! # 2 matches
  matchesLeg5: Match # 1 match
}

extend type Query {
  tournament(id: String!): Tournament
  match(id: String!): Match
}

extend type Mutation {
  createTournament(
    name: String!
    size: TournamentSize!
    discipline: Discipline!
    organizationKey: String!
    teamSize: Int!
  ): Tournament
  # createSmallTournament(
  #   name: String!
  #   discipline: Discipline!
  #   organizationKey: String!
  #   teamSize: Int!
  # ): TournamentSmall
  # createMediumTournament(
  #   name: String!
  #   discipline: Discipline!
  #   organizationKey: String!
  #   teamSize: Int!
  # ): TournamentMedium
  # createLargeTournament(
  #   name: String!
  #   discipline: Discipline!
  #   organizationKey: String!
  #   teamSize: Int!
  # ): TournamentLarge
  # createXLargeTournament(
  #   name: String!
  #   discipline: Discipline!
  #   organizationId: String!
  #   teamSize: Int!
  # ): TournamentXLarge
  addPlayerToTeam(
    tournamentId: String!
    teamKey: String!
    playerId: String!
  ): Tournament
  removePlayerFromTeam(
    tournamentId: String!
    teamKey: String!
    playerId: String!
  ): Tournament
  startTournament(tournamentId: String!): Tournament
  setTournamentMatchWinner(
    tournamentId: String!
    matchId: String!
    teamKey: String!
  ): Tournament
  createQuickMatch(
    organizationKey: String!
    discipline: Discipline!
    teamSize: Int!
    # list of player ids
    teamLeft: [String!]!
    teamRight: [String!]!
  ): Match
}
