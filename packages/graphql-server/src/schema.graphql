# import Role,Discipline,MatchSingle,MatchSingleStatus,Tournament,TournamentStatus,TournamentSize,TournamentOrderByInput from "./generated/prisma.graphql"

directive @isAuthenticated(role: Role) on FIELD_DEFINITION

type Query {
  me: User! @isAuthenticated
  isOrganizationKeyUsed(key: String!): Boolean!
  organization(key: String!): Organization @isAuthenticated(role: Member)
  tournaments(
    organizationKey: String!
    status: [TournamentStatus!] # OR`condition
    orderBy: TournamentOrderByInput!
    page: Int!
    perPage: Int!
  ): [Tournament!]! @isAuthenticated(role: Member)
  singleMatches(
    organizationKey: String!
    status: MatchSingleStatus!
    orderBy: MatchSingleOrderBy!
    page: Int!
    perPage: Int!
  ): [MatchSingle!]! @isAuthenticated(role: Member)
}

type Mutation {
  # TODO: add mutation to save userRef (auth0Id)

  createOrganization(
    key: String! # unique identifier
    name: String!
  ): Organization @isAuthenticated
  promoteMemberToAdmin(
    organizationKey: String!
    memberAuth0Id: String!
  ): Organization @isAuthenticated(role: Admin)
  demoteAdminToMember(
    organizationKey: String!
    memberAuth0Id: String!
  ): Organization @isAuthenticated(role: Admin)
  addMemberToOrganization(
    organizationKey: String!
    memberAuth0Id: String!
  ): Organization @isAuthenticated(role: Admin)
  removeMemberFromOrganization(
    organizationKey: String!
    memberAuth0Id: String!
  ): Organization @isAuthenticated(role: Admin)

  createTournament(
    organizationKey: String!
    name: String!
    size: TournamentSize!
    discipline: Discipline!
    teamSize: Int!
  ): Tournament @isAuthenticated(role: Member)
  addPlayerToTeam(
    organizationKey: String!
    tournamentId: ID!
    teamId: ID!
    memberId: ID!
  ): Tournament @isAuthenticated(role: Member)
  removePlayerFromTeam(
    organizationKey: String!
    tournamentId: ID!
    teamId: ID!
    memberId: ID!
  ): Tournament @isAuthenticated(role: Member)
  startTournament(organizationKey: String!, tournamentId: String!): Tournament
    @isAuthenticated(role: Member)
  setTournamentMatchTeamWinner(
    organizationKey: String!
    tournamentId: ID!
    matchTournamentId: ID!
    teamWinnerId: ID!
  ): Tournament @isAuthenticated(role: Member)

  createSingleMatch(
    organizationKey: String!
    discipline: Discipline!
    teamLeft: MatchSingleTeamInput!
    teamRight: MatchSingleTeamInput!
  ): MatchSingle @isAuthenticated(role: Member)
  setSingleMatchTeamWinner(
    organizationKey: String!
    matchId: ID!
    teamWinnerId: ID!
  ): MatchSingle @isAuthenticated(role: Member)
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  email: String!
  name: String!
  picture: String!
  role: Role!
  availableOrganizations: [OrganizationInfo!]!
}

type Organization {
  key: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  members: [MemberInfo!]!
}

# A `MemberInfo` contains basic user profile data plus
# specific fields related to the organization (e.g. role)
type MemberInfo {
  id: ID!
  auth0Id: String!
  email: String!
  name: String!
  picture: String!
  role: Role!
}

type OrganizationInfo {
  key: String!
  name: String!
}

type TournamentInfo {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  discipline: Discipline!
  status: TournamentStatus!
  size: TournamentSize!
  teamSize: Int!
}

input MatchSingleTeamInput {
  size: Int!
  playerIds: [ID!]!
}

enum MatchSingleOrderBy {
  createdAt_ASC
  createdAt_DESC
}
