enum Role {
  Admin
  Member
}

enum TournamentSize {
  Small
  Medium
  Large
}

enum TournamentStatus {
  New
  InProgress
  Finished
}

enum MatchSingleStatus {
  New
  Finished
}

enum Discipline {
  PoolTable
  TableTennis
}

type MemberRef {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  # Users are only stored in Auth0, therefore we only
  # need a reference to them.
  # NOTE: ideally, we would like to ensure that for each
  # Member the combination of `auth0Id` and `Organization`
  # is unique, meaning that there should only be one unique
  # user for each organization.
  # The support for this feature might come soon...
  # In the meantime, we need to ensure on our own that we
  # do not add multiple members with the same `auth0Id` ref
  # to the same organization!
  auth0Id: String!
  organization: Organization!
  role: Role!
}

type Organization {
  key: String! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  memberRefs: [MemberRef!]!
}

type Tournament {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  size: TournamentSize!
  status: TournamentStatus!
  discipline: Discipline!
  organization: Organization!
  teamSize: Int!
  # The number of teams depends on the size of the tournament
  teams: [TeamMatchTournament!]!
  roundLastSixteen: RoundLastSixteen
  roundQuarterfinals: RoundQuarterfinals
  roundSemifinals: RoundSemifinals
  roundFinal: RoundFinal
}

type TeamMatchTournament {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  tournament: Tournament!
  size: Int!
  playerRefs: [MemberRef!]!
  # ðŸ‘‡ List all relation fields
  # See https://github.com/graphcool/prisma/issues/1907
  matchTournamentTeamLeft: MatchTournament @relation(name: "TeamLeftMatchTournament")
  matchTournamentTeamRight: MatchTournament @relation(name: "TeamRightMatchTournament")
  matchTournamentTeamWinner: MatchTournament @relation(name: "TeamWinnerMatchTournament")
  _ignore_: String
}

type TeamMatchSingle {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  size: Int!
  playerRefs: [MemberRef!]!
  # ðŸ‘‡ List all relation fields
  # See https://github.com/graphcool/prisma/issues/1907
  matchSingleTeamLeft: MatchSingle @relation(name: "TeamLeftMatchSingle")
  matchSingleTeamRight: MatchSingle @relation(name: "TeamRightMatchSingle")
  matchSingleTeamWinner: MatchSingle @relation(name: "TeamWinnerMatchSingle")
  _ignore_: String
}

type RoundLastSixteen {
  matchA: MatchTournament! @relation(name: "MatchAOfRoundLastSixteen")
  matchB: MatchTournament! @relation(name: "MatchBOfRoundLastSixteen")
  matchC: MatchTournament! @relation(name: "MatchCOfRoundLastSixteen")
  matchD: MatchTournament! @relation(name: "MatchDOfRoundLastSixteen")
  matchE: MatchTournament! @relation(name: "MatchEOfRoundLastSixteen")
  matchF: MatchTournament! @relation(name: "MatchFOfRoundLastSixteen")
  matchG: MatchTournament! @relation(name: "MatchGOfRoundLastSixteen")
  matchH: MatchTournament! @relation(name: "MatchHOfRoundLastSixteen")
  tournament: Tournament!
  _ignore_: String
}

type RoundQuarterfinals {
  matchA: MatchTournament! @relation(name: "MatchAOfRoundQuarterfinals")
  matchB: MatchTournament! @relation(name: "MatchBOfRoundQuarterfinals")
  matchC: MatchTournament! @relation(name: "MatchCOfRoundQuarterfinals")
  matchD: MatchTournament! @relation(name: "MatchDOfRoundQuarterfinals")
  tournament: Tournament!
  _ignore_: String
}

type RoundSemifinals {
  matchA: MatchTournament! @relation(name: "MatchAOfRoundSemifinals")
  matchB: MatchTournament! @relation(name: "MatchBOfRoundSemifinals")
  tournament: Tournament!
  _ignore_: String
}

type RoundFinal {
  match: MatchTournament! @relation(name: "MatchOfRoundFinal")
  tournament: Tournament!
  _ignore_: String
}

# A tournament match does not require teams to be defined
# when creating the tournament. Teams will be added while
# configuring the tournament. However, a tournament cannot
# be started without all the teams in place.
type MatchTournament {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  organization: Organization!
  tournament: Tournament!
  discipline: Discipline!
  teamLeft: TeamMatchTournament @relation(name: "TeamLeftMatchTournament")
  teamRight: TeamMatchTournament @relation(name: "TeamRightMatchTournament")
  winner: TeamMatchTournament @relation(name: "TeamWinnerMatchTournament")
  nextMatch: MatchTournament
  # ðŸ‘‡ List all relation fields
  # See https://github.com/graphcool/prisma/issues/1907
  roundLastSixteenMatchA: RoundLastSixteen @relation(name: "MatchAOfRoundLastSixteen")
  roundLastSixteenMatchB: RoundLastSixteen @relation(name: "MatchBOfRoundLastSixteen")
  roundLastSixteenMatchC: RoundLastSixteen @relation(name: "MatchCOfRoundLastSixteen")
  roundLastSixteenMatchD: RoundLastSixteen @relation(name: "MatchDOfRoundLastSixteen")
  roundLastSixteenMatchE: RoundLastSixteen @relation(name: "MatchEOfRoundLastSixteen")
  roundLastSixteenMatchF: RoundLastSixteen @relation(name: "MatchFOfRoundLastSixteen")
  roundLastSixteenMatchG: RoundLastSixteen @relation(name: "MatchGOfRoundLastSixteen")
  roundLastSixteenMatchH: RoundLastSixteen @relation(name: "MatchHOfRoundLastSixteen")
  roundQuarterfinalsMatchA: RoundQuarterfinals @relation(name: "MatchAOfRoundQuarterfinals")
  roundQuarterfinalsMatchB: RoundQuarterfinals @relation(name: "MatchBOfRoundQuarterfinals")
  roundQuarterfinalsMatchC: RoundQuarterfinals @relation(name: "MatchCOfRoundQuarterfinals")
  roundQuarterfinalsMatchD: RoundQuarterfinals @relation(name: "MatchDOfRoundQuarterfinals")
  roundSemifinalsMatchA: RoundSemifinals @relation(name: "MatchAOfRoundSemifinals")
  roundSemifinalsMatchB: RoundSemifinals @relation(name: "MatchBOfRoundSemifinals")
  roundFinalMatch: RoundFinal @relation(name: "MatchOfRoundFinal")
  _ignore_: String
}

# A single match requires both teams to be defined
# when creating the match.
type MatchSingle {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  organization: Organization!
  discipline: Discipline!
  status: MatchSingleStatus!
  teamLeft: TeamMatchSingle! @relation(name: "TeamLeftMatchSingle")
  teamRight: TeamMatchSingle! @relation(name: "TeamRightMatchSingle")
  winner: TeamMatchSingle @relation(name: "TeamWinnerMatchSingle")
  _ignore_: String
}
